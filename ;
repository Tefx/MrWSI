from MrWSI.core.problem import Problem
from MrWSI.core.bin import MemPool, Bin


class Context(object):
    def __init__(self, problem):
        self.problem = problem
        self.machine_node_pool = MemPool(problem.multiresource_dimension,
                                         problem.num_tasks, "node")
        self.machine_item_pool = MemPool(problem.multiresource_dimension,
                                         problem.num_tasks, "item")
        self.platform_node_pool = MemPool(problem.platform_limit_dimension,
                                          problem.num_types, "node")
        self.platform_item_pool = MemPool(problem.platform_limit_dimension,
                                          problem.num_types, "item")


class Machine(Bin):
    def __init__(self, type_id, context):
        super().__init__(problem.multiresource_dimension,
                         context.machine_node_pool, context.machine_item_pool)
        self.item = None
        self.problem = context.problem
        self.type_id = type_id


class Platform(Bin):
    def __init__(self, problem, context):
        super().__init__(problem.platform_limit_dimension,
                         context.platform_node_pool,
                         context.platform_item_pool)
        self.problem = problem
        self.machines = set()

    def extendable_interval(self, machine):
        super().extendable_interval(machine.item, self.problem.platform_limits)

    def acquire_machine(self, machine, start_node=None):
        self.machines.add(machine)
        machine.item = self.alloc_item(
            machine.open_time,
            problem.type_capacities(machine.type_id), machine.span, start_node)

    def update_machine(self, machine):
        machine.item = self.extend_item(machine.item, machine.open_time, machine.close_time)
